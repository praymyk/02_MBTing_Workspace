<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">

	<resultMap id="memberResultSet" type="member">
		<result column="USER_NO"  		property="userNo"></result>
		<result column="EMAIL"  		property="email"></result>
		<result column="USER_PWD"  		property="userPwd"></result>
		<result column="PROFILE_IMG" 	property="profileImg"></result>
		<result column="USER_NAME"  	property="userName"></result>
		<result column="AGE"  			property="age"></result>
		<result column="GENDER"  		property="gender"></result>
		<result column="HEIGHT"			property="height"></result>
		<result column="PHONE" 		 	property="phone"></result>
		<result column="MBTI"  			property="mbti"></result>
		<result column="MBTI_NICK"  	property="mbtiNick"></result>
		<result column="MBTI_MATCH"		property="mbtiMatch"></result>
		<result column="INTRODUCE"  	property="introduce"></result>
		<result column="ADDRESS"		property="address"></result>
		<result column="ENROLL_DATE"  	property="enrollDate"></result>
		<result column="MODIFY_DATE"  	property="modifyDate"></result>
		<result column="MATCH_STAT"  	property="matchStat"></result>
		<result column="MATCH_COIN"  	property="matchCoin"></result>
		<result column="STATUS"  		property="status"></result>
	</resultMap>
	 
	<resultMap id="boardResultSet" type="board">
		<result column="BOARD_NO" property="boardNo"></result>
		<result column="BOARD_TITLE" property="boardTitle"></result>
		<result column="BOARD_CONTENT" property="boardContent"></result>
		<result column="VIEWS" property="views"></result>
		<result column="ENROLL_DATE" property="enrollDate"></result>
		<result column="MODIFY_DATE" property="modifyDate"></result>
		<result column="STATUS" property="status"></result>
		<result column="USER_NO" property="userNo"></result>
		<result column="MATCH_NO" property="matchNo"></result>
		<result column="ORIGIN_NAME" property="originName"></result>
		<result column="CHANGE_NAME" property="changeName"></result>
		<result column="USER_NAME" property="userName"></result>
		<result column="THUMB_COUNT" property="thumbCount"></result>
	</resultMap>
	 
	<resultMap type="chatRoom" id="chatRoomResultSet">
	    <result property="roomNo" column="ROOM_NO" />
	    <result property="userEmail" column="USER_EMAIL" />
	    <result property="userName" column="USER_NAME" />        
	    <result property="userPic" column="USER_PRO_IMG" />
	    <result property="masterEmail" column="MASTER_EMAIL" />
	    <result property="masterName" column="MASTER_NAME" />
	    <result property="masterPic" column="MASTER_PRO_IMG" />
	    <result property="sendTime" column="SENDTIME" />
	    <result property="messageContent" column="MESSAGE_CONTENT" />
	</resultMap>

	<resultMap type="chatMessage" id="chatMessageResultSet">
        <result property="messageNo" column="MESSAGE_NO" />
        <result property="roomNo" column="ROOM_NO" />
        <result property="messageContent" column="MESSAGE_CONTENT" />
        <result property="name" column="USER_NAME" />
        <result property="email" column="USER_EMAIL" />
        <result property="unReadCount" column="UNREAD_COUNT" />
        <result property="sendTime" column="SENDTIME" />
    </resultMap>
    
    <resultMap type="matching" id="matchingResultSet">
    
    	<result property="matchNo" column="MATCH_NO"/>
    	<result property="receiverNo" column="RECEIVER_NO"/>
    	<result property="proposerNo" column="PROPOSER_NO"/>
    	<result property="matchTime" column="MATCH_TIME"/>
    	<result property="propStat" column="PROP_STAT"/>
    	<result property="receStat" column="RECE_STAT"/>
    	<result property="matchStat" column="MATCH_STAT"/>
    	
    </resultMap>
 
 	<resultMap id="monthResultSet" type="month">
		<result property="month" column="MONTH"/>
 		<result property="enrollCount" column="ENROLL_COUNT"/>
 		<result property="matchStat" column="MATCH_STAT"/>
 	</resultMap>
 	
 	<resultMap id="verificationResultSet" type="verification">
		<result property="email" column="EMAIL"/>
 		<result property="emailCode" column="EMAIL_CODE"/>
 		<result property="createDate" column="CREATE_DATE"/>
 	</resultMap>
 	
 	
	<!-- top 회원 정보를 불러오기 위한 쿼리문 -->
 	<select id="selectTopMemberList" resultMap="memberResultSet" >
		SELECT ROWNUM, A.*
		FROM (
		    SELECT profile_img, age, mbti , user_name , mbti_nick , email , user_no 
		      FROM (
		        SELECT M.*, RANK() OVER (ORDER BY COALESCE(matching_count, 0) DESC) AS rnk
		        FROM MEMBER M
		        LEFT JOIN (
		            SELECT RECEIVER_NO, COUNT(*) AS matching_count
		            FROM MATCHING
		            GROUP BY RECEIVER_NO
		        ) C ON M.user_no = C.RECEIVER_NO
		        WHERE STATUS = 'Y'  
		          AND MBTI IS NOT NULL
		    ) 
		) A
		<choose>
			<when test="email != null">
				WHERE ROWNUM BETWEEN 1 AND 4
				  AND EMAIL NOT IN (SELECT BLOCKMEMEMAIL FROM BLOCKMEMBER WHERE BLOCKPROEMAIL = #{email})
				  AND USER_NO != 0
			</when>
			<otherwise>
				WHERE ROWNUM BETWEEN 1 AND 4
				AND USER_NO != 0
			</otherwise>
		</choose>
		
 	</select>
	
 	
	<!-- 로그인용 쿼리문(로그인한 회원정보 담고 있음) -->
	<select id="loginMember" resultMap="memberResultSet" parameterType="member">
	  SELECT *
	  	FROM MEMBER 
	   WHERE EMAIL  	= #{email}
	  	 AND STATUS 	= 'Y'
	</select>
	
	<!-- 회원가입 용 쿼리문 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO MEMBER (USER_NO, EMAIL, USER_PWD, USER_NAME, AGE, GENDER, PHONE)
           	 VALUES (UNO_SEQ.NEXTVAL,
           	 		 #{email},
           	 		 #{userPwd},
           	 		 #{userName},
           	 		 #{age},
           	 		 #{gender},
           	 		 #{phone})	
	</insert>
	<!-- 회원가입 - 이메일 중복 검사용 쿼리문 -->
	<select id="checkEmail" parameterType="member" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
		 WHERE EMAIL = #{email}	
	</select>
	
	<!-- 회원정보 수정용 쿼리문  -->
	<update id="updateMember" parameterType="member">
		UPDATE MEMBER
		   SET PROFILE_IMG = #{profileImg}
		   	 , INTRODUCE = #{introduce}
		   	 , ADDRESS = #{address}
		     , PHONE = #{phone}
		 WHERE EMAIL = #{email}
		   AND STATUS = 'Y'	
	</update>
	<update id="updatePwd" parameterType="member">
		UPDATE MEMBER
		   SET USER_PWD = #{userPwd}
		 WHERE EMAIL = #{email}
	</update>
	
	<!-- 나에게 매칭을 신청한 인원 수 확인용 쿼리문 -->
	<select id="proposerCount" parameterType="string" resultType="_int">
	  SELECT COUNT(*)
        FROM MATCHING
  	   WHERE RECEIVER_NO = #{userNo}
  	     AND MATCH_STAT = 2
	</select>
	
	<!-- 나에게 매칭을 신청한 인원 리스트 확인용 쿼리문 -->
	<select id="proposerList" parameterType="string" resultMap="memberResultSet">
		SELECT *
		  FROM MEMBER
		 WHERE USER_NO IN ( SELECT PROPOSER_NO
		                     FROM MATCHING
		                    WHERE RECEIVER_NO = #{userNo}
		                      AND MATCH_STAT = '2')
		   AND MATCH_STAT = 2
	</select>
	
	<!-- 나에게 신청된 매칭 수락용 쿼리문(신청자 상태 변화) -->
	<update id="proposeAccept" parameterType="string">
		UPDATE MEMBER
		   SET MATCH_STAT = 3
		 WHERE USER_NO = #{proposerNo}
	</update>
	<!-- 나에게 신청된 매칭 수락용 쿼리문(대상자 상태 변화) -->
	<update id="proposeAccepted" parameterType="string">
		UPDATE MEMBER
		   SET MATCH_STAT = 3
		 WHERE USER_NO = #{receiverNo}
	</update>
	<!-- 나에게 신청된 매칭 거절용 쿼리문 -->
	<update id="refusePropose" parameterType="matching">
		UPDATE MATCHING
		   SET MATCH_STAT = 1
		 WHERE PROPOSER_NO = #{proposerNo}
		   AND RECEIVER_NO = #{receiverNo}
	</update>
	<!-- 마이페이지 메칭 수락 뒤 회원정보 추출용 -->
	<select id="proposerInfo" parameterType="string" resultMap="memberResultSet">
	  SELECT *
	  	FROM MEMBER 
	   WHERE USER_NO	= #{userNO}
	  	 AND STATUS 	= 'Y'
	</select>
	
	<!-- 마이페이지 메칭 수락 뒤 챗룸 추가용 -->
	<insert id="createChatroom" parameterType="chatRoom">
		INSERT INTO CHATROOM (ROOM_NO,USER_EMAIL,USER_NAME,USER_PRO_IMG,MASTER_EMAIL,MASTER_NAME,MASTER_PRO_IMG,UN_READ_MESSAGE)
           	 VALUES (RNO_SEQ.NEXTVAL,
           	 		 #{userEmail},
           	 		 #{userName},
           	 		 #{userPic},
           	 		 #{masterEmail},
           	 		 #{masterName},
           	 		 #{masterPic},
           	 		 default)
  	</insert>
  	<!-- 마이페이지 메칭 수락 뒤 첫 메시지 생성용 -->
  	<insert id="createChatMessage" parameterType="chatMessage">
	  	INSERT INTO CHATMESSAGE (ROOM_NO, MESSAGE_NO, MESSAGE_CONTENT, USER_NAME, USER_EMAIL, UN_READ_MESSAGE, SESSION_COUNT, SENDTIME)
	     VALUES (RNO_SEQ.CURRVAL,
	             CNO_SEQ.NEXTVAL,
	             #{messageContent},
	             #{name},
	             #{email},
	             2,
	             0,
	             DEFAULT)
  	</insert>
  	<!-- 마이페이지 대화 신청 수락 뒤 매칭 테이블 상태(3/매칭 진행 상태로) 업데이트 용 쿼리문 -->
  	<update id="matchingStrat" parameterType="matching">
  		UPDATE MATCHING
  		   SET MATCH_STAT = 3
  		 WHERE RECEIVER_NO = #{receiverNo} AND PROPOSER_NO = #{proposerNo}
  	</update>

	<!-- 내 후기 게시글 총 갯수 확인용 쿼리문 -->
	<select id="selectListCount" resultType="_int">
		SELECT COUNT(*)
	  	  FROM BOARD
	 	 WHERE USER_NO = #{userNo}
	 	   AND STATUS = 'Y'
	</select>
	
	<!-- 내 후기 게시글 조회용 쿼리문 -->
	<select id="selectList" resultMap="boardResultSet" parameterType="member">
		  SELECT B.BOARD_NO
			     , B.BOARD_TITLE
			     , B.USER_NO
			     , M.MBTI_NICK
			     , TO_CHAR(B.ENROLL_DATE, 'YYYY-MM-DD') AS "ENROLL_DATE"
				 , BI.ORIGIN_NAME
				 , BI.CHANGE_NAME
				 , B.VIEWS
		            , (
		               SELECT COUNT (*)
		                 FROM THUMB
		                WHERE BOARD_NO = B.BOARD_NO
		            ) AS THUMB_COUNT
			  FROM BOARD B, BOARDIMG BI, MEMBER M
		        WHERE B.BOARD_NO = BI.BOARD_NO (+)
		          AND B.USER_NO = M.USER_NO (+)
			   AND B.STATUS = 'Y'
			   AND BI.THUMBNAIL = 'Y'
			   AND B.USER_NO = #{userNo}
			 ORDER BY BOARD_NO DESC
	</select>
	
	<!-- 내 대화 상대 정보 조회용 쿼리문 -->
	<select id="myChat" parameterType="string" resultMap="memberResultSet">
	   SELECT PROPOSER_NO,USER_NAME, PROFILE_IMG, AGE, GENDER, MBTI, MBTI_NICK
	     FROM MATCHING MC
	     JOIN MEMBER MB ON MC.PROPOSER_NO = MB.USER_NO
	    WHERE MC.MATCH_STAT = '3'
	      AND MB.MATCH_STAT = '3'
	      AND MC.RECEIVER_NO = #{userNo}
	    ORDER BY MATCH_TIME DESC
	</select>
	
	<!-- 매치리스트 추가 -->
	<insert id="insertMatchRequestList" parameterType="member">
		INSERT INTO MATCHING
			 VALUES (MNO_SEQ.NEXTVAL, 
			 		#{receiverNo}, 
			 		#{userNo},
			 		default,
			 		default,
			 		default,
			 		default)
	</insert>
	
	<!-- 관리자페이지 전체 회원 수 조회 -->
	<select id="selectTotalMembers" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
		 WHERE STATUS = 'Y'
	</select>


	<!-- 전체 커플 수 조회 -->
	<select id="selectTotalCouple" resultType="_int">
		SELECT COUNT(*)
		  FROM MATCHING
		 WHERE MATCH_STAT = 1
	</select>

	<!-- 월별 회원 가입 그래프 -->
	<select id="selectTotalMonthly" resultMap="monthResultSet">
		WITH Months AS (
	      SELECT TO_CHAR(LEVEL, 'FM00') AS month
	      FROM dual
	      CONNECT BY LEVEL &lt;= 12
	    )
	    SELECT m.month,
	           COUNT(member.enroll_date) AS ENROLL_COUNT
	    FROM Months m
	    LEFT JOIN member ON TO_CHAR(member.enroll_date, 'MM') = m.month
	    GROUP BY m.month
	    ORDER BY m.month
	</select>
	
	<!-- 커플 매칭 수락(MATCH_STAT = 3) 그래프 -->
	<select id="totalMatchingSuccess" resultMap="monthResultSet">
		WITH Months AS (
		    SELECT TO_CHAR(LEVEL, 'FM00') AS month
		    FROM dual
		    CONNECT BY LEVEL &lt;= 12
		)
		SELECT m.month,
		       COUNT(CASE WHEN MATCHING.MATCH_STAT = 3 THEN MATCHING.MATCH_TIME END) AS MATCH_STAT
		FROM Months m
		LEFT JOIN MATCHING ON TO_CHAR(MATCHING.MATCH_TIME, 'MM') = m.month
		GROUP BY m.month
		ORDER BY m.month
	</select>
	
	<!-- 커플 매칭 거절(MATCH_STAT = 1) 그래프 -->
	<select id="totalMatchingRefusal" resultMap="monthResultSet">
		WITH Months AS (
		    SELECT TO_CHAR(LEVEL, 'FM00') AS month
		    FROM dual
		    CONNECT BY LEVEL &lt;= 12
		)
		SELECT m.month,
		       COUNT(CASE WHEN MATCHING.MATCH_STAT = 1 THEN MATCHING.MATCH_TIME END) AS MATCH_STAT
		FROM Months m
		LEFT JOIN MATCHING ON TO_CHAR(MATCHING.MATCH_TIME, 'MM') = m.month
		GROUP BY m.month
		ORDER BY m.month
	</select>
	
	<!-- 커플 매칭 거절(MATCH_STAT = 2) 그래프 -->
	<select id="totalMatchingPending" resultMap="monthResultSet">
		WITH Months AS (
		    SELECT TO_CHAR(LEVEL, 'FM00') AS month
		    FROM dual
		    CONNECT BY LEVEL &lt;= 12
		)
		SELECT m.month,
		       COUNT(CASE WHEN MATCHING.MATCH_STAT = 2 THEN MATCHING.MATCH_TIME END) AS MATCH_STAT
		FROM Months m
		LEFT JOIN MATCHING ON TO_CHAR(MATCHING.MATCH_TIME, 'MM') = m.month
		GROUP BY m.month
		ORDER BY m.month
	</select>
	
	<!-- MBTI 성향 분포도 -->
	<select id="totalMbtiCount" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
		 GROUP BY MBTI
		 ORDER BY MBTI 
	</select>
	
	<!-- 남녀성비 원그래프 -->
	<select id="totalGenderRate" resultType="_int">
		SELECT COUNT(*) AS GENDER_COUNT
		  FROM MEMBER
		 GROUP BY GENDER
	</select>
	
	<!-- 매칭 성공률 원그래프 -->
	<select id="totalMatchingRate" resultType="_int">
		SELECT COUNT(*)
		  FROM MATCHING
		GROUP BY MATCH_STAT
	</select>
	
	<!-- 관리자페이지 전체회원 조회 -->
	<select id="memberSelectListCount" resultType="_int">
		SELECT COUNT(*)
		  FROM MEMBER
	</select>
	
	<!-- 관리자페이지 회원 목록 조회 -->
	<select id="memberSelectList" resultMap="memberResultSet">
		SELECT USER_NO
		     , USER_NAME
		     , MBTI
		     , EMAIL
		     , GENDER
		     , STATUS
		     , ROWNUM AS rnum
		  FROM MEMBER
		 ORDER BY USER_NO
	</select>
	
	<select id="memberSelectList2" resultMap="memberResultSet">
		SELECT M.USER_NO
		     , M.USER_NAME
		     , M.MBTI
		     , M.EMAIL
		     , M.GENDER
		     , M.STATUS
		     , K.PARTNER_USER_ID AS partnerUserId
		     , K.ORDER_DATE AS orderDate
		     , ROWNUM AS rnum
		  FROM MEMBER M
		  LEFT JOIN KAKAOPAY K ON (M.EMAIL = K.PARTNER_USER_ID)
		 ORDER BY USER_NO
	</select> 
	
	
	
	
	<!-- 검색된 회원 수 조회 -->
    <select id="memberSearchListCount" parameterType="string" resultType="_int">
        SELECT COUNT(*)
          FROM MEMBER
         WHERE (USER_NAME LIKE '%' || #{keyword} || '%'
               OR MBTI LIKE '%' || #{keyword} || '%'
               OR EMAIL LIKE '%' || #{keyword} || '%')
    </select>

   <!-- 검색된 회원 리스트 조회 -->
	<select id="memberSearchList" resultMap="memberResultSet" parameterType="map">
	    SELECT *
	    FROM (
	        SELECT
	            USER_NO,
	            USER_NAME,
	            MBTI,
	            EMAIL,
	            GENDER,
	            STATUS,
	            ROWNUM AS rnum
	        FROM MEMBER
	        WHERE (USER_NAME LIKE '%' || #{keyword} || '%'
	            OR MBTI LIKE '%' || #{keyword} || '%'
	            OR EMAIL LIKE '%' || #{keyword} || '%')
	        ORDER BY USER_NO DESC
	    )
	    WHERE rnum BETWEEN #{startRow} AND #{endRow}
	</select>
	

	
	<!-- updateSelectedStatus() 메서드의 SQL Y로 status 변경
	<update id="updateSelectedStatus" parameterType="string">
	    UPDATE MEMBER
	   	   SET STATUS = 'Y'
	   	 WHERE USER_NO = #{memberNo}
	</update>
	
	updateSelectedStatus2 => N으로 status 변경 
	 <update id="updateSelectedStatus2" parameterType="string">
	    UPDATE MEMBER
	   	   SET STATUS = 'N'
	   	 WHERE USER_NO = #{memberNo}
	</update>
	
	<전체 회원 수 가져오는 쿼리문 
	<select id="selectAllMember" resultType="_int">
		SELECT COUNT(*)
		FROM MEMBER
	</select>
	-->
	<!-- 회원관리 상태 변경 및 저장 -->
	<update id="updateStatus" parameterType="hashmap">
	    UPDATE MEMBER
	    SET STATUS = #{status}
	    WHERE USER_NO = #{userNo}
	</update> 
	
	<!-- 카카오 로그인 체크용 쿼리문 -->
	<select id="kakaoLoginCheck" parameterType="string" resultMap="memberResultSet">
		SELECT *
		  FROM MEMBER
		 WHERE EMAIL = #{email}
	</select>
	
	<!-- 인증 메일 저장용 쿼리문 -->
	<insert id="getCertNo" parameterType="verification">
		INSERT INTO VERIFICATION (EMAIL, EMAIL_CODE)
	         VALUES (#{email},
           	 		 #{emailCode})	
	</insert>
	
	<select id="adminMemberDetailView" parameterType="string" resultMap="memberResultSet">
		SELECT *
		FROM MEMBER
		WHERE USER_NO = #{userNo}
	</select>
	
	<!-- 인증 코드 확인용 쿼리문 -->
	<select id="checkCertNo" parameterType="verification" resultMap="verificationResultSet">
		SELECT *
		  FROM VERIFICATION
		 WHERE EMAIL_CODE = #{emailCode}
	
	</select>
	
	<!-- 임시 비밀번호 업데이트용 쿼리문 -->
	<update id="newPassWord" parameterType="member">
		UPDATE MEMBER
		   SET USER_PWD = #{userPwd}
		 WHERE EMAIL = #{email}
	</update>
	
	<!-- 인증메일 삭제용 쿼리문 -->
	<delete id="deleteCertNo" parameterType="member">
		DELETE FROM VERIFICATION
		 WHERE EMAIL = #{email}
	</delete>
</mapper>